<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <!--
     spring/hibernate config
     -->

    <bean id="hibConfigDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url"             value="jdbc:h2:file:geoserver"/>
        <property name="username"        value=""/>
        <property name="password"        value=""/>
    </bean>
    
    <bean id="hibPostLoadEventListener" class="org.geoserver.catalog.hib.HibPostLoadEventListener"/>
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="hibConfigDataSource"/>
        <property name="persistenceProvider">
            <bean class="org.geoserver.hibernate.ConfigurableHibernatePersistence">
                <property name="interceptor">
                    <!-- can't inject catalog/config directly because it causes a cycle -->
                    <bean class="org.geoserver.hibernate.HibPropertyChangeInterceptor"/>
                </property>
                <property name="postLoadEventListeners">
                  <list>
                     <ref bean="hibPostLoadEventListener"/>
                  </list>
                </property>
            </bean>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="H2" />
                <property name="databasePlatform" value="org.geoserver.hibernate.H2Dialect" />
                <property name="showSql" value="false" />
                <property name="generateDdl" value="true" />
            </bean>
        </property>

        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.hbm2ddl.auto" value="update" />
                
                <!--entry key="hibernate.cache.provider_class" value="org.hibernate.cache.EhCacheProvider"/>
                <entry key="hibernate.cache.provider_configuration_file_resource_path" value="/ehcache.xml"/-->
                
                <!-- enable second level caching and query caching -->
                <!--entry key="hibernate.cache.use_query_cache" value="true"/>
                <entry key="hibernate.cache.use_second_level_cache" value="true"/-->
                
                <entry key="hibernate.generate_statistics" value="true"/>
                <entry key="hibernate.session_factory_name" value="SessionFactory"/>
                
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="true"/>
                
                <entry key="hibernate.show_sql" value="false"/>
                <entry key="hibernate.use_sql_comments" value="true"/>
                <entry key="hibernate.format_sql" value="true"/>
            </map>
        </property>
    </bean>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
    <!-- Instruct Spring to perform declarative transaction management  -->
    <!-- automatically on annotated classes.                            -->
    <tx:annotation-driven/>

    <!-- PostProcessors to perform resource injection according to the JPA -->
    <!-- specification (@PersistenceContext, @PersistenceUnit).            -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <!-- PostProcessors to perform exception translation on @Repository     -->
    <!-- classes (from native exceptions such as JPAPersistenceExceptions   -->
    <!--to Spring's DataAccessException hierarchy).                         -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

    <context:annotation-config/>
    
    <!--
     geoserver config
     -->
    <bean id="hibCatalogDAO" class="org.geoserver.catalog.hib.HibCatalogDAO">
    </bean>
    
    <bean id="hibGeoServerDAO" class="org.geoserver.config.hib.HibGeoServerDAO">
    </bean>
    
    <bean id="hibGeoServerLoader" class="org.geoserver.hibernate.HibGeoServerLoader">
       <constructor-arg ref="resourceLoader"/>
       <property name="catalogDAO" ref="hibCatalogDAO"/>
       <property name="geoServerDAO" ref="hibGeoServerDAO"/>
    </bean>
    

</beans>