<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
	<bean id="wmsLegacyLoader" class="org.geoserver.wms.WMSLoader"/>
    <bean id="wmsLoader" class="org.geoserver.wms.WMSXStreamLoader">
      <constructor-arg ref="resourceLoader"/>
    </bean>
    
    <!-- wms configuration bean. This is a service level facade to the configuration system -->
    <bean id="wms" class="org.geoserver.wms.WMS">
      <constructor-arg ref="geoServer"/>
    </bean>
    
	<!-- this registers the above modules with the servlet context
		 it is around to keep the struts app happy as we move away from 
		 servlets  -->
	<bean id="wmsRegisterar"
		class="org.vfny.geoserver.global.GeoServerServletContextInitializer">
		
		<constructor-arg type="java.lang.String" value="WMS"/>
 		<constructor-arg ref="wms"/>
 	</bean>
 	
 	<!-- 
		operation beans for handling incoming requests 
	-->
	<bean id="wmsGetCapabilities" 
		class="org.geoserver.wms.GetCapabilities" >
      <description>WMS GetCapabilities operation</description>
      <constructor-arg ref="wms"/>
	</bean>

    <bean id="wmsGetStyles"
        class="org.geoserver.sld.GetStyles">
       <description>WMS GetStyles operation</description>
       <constructor-arg ref="wms"/>
    </bean>
    
	<bean id="wmsDescribeLayer"
		class="org.geoserver.wms.DescribeLayer">
       <description>WMS DescribeLayer operation</description>
      <constructor-arg ref="wms"/>
	</bean>
		
	<bean id="wmsGetFeatureInfo"
		class="org.geoserver.wms.GetFeatureInfo">
      <constructor-arg ref="wms"/>
	</bean>
		
	<bean id="wmsGetLegendGraphic"
		class="org.geoserver.wms.GetLegendGraphic">
      <constructor-arg ref="wms"/>
	</bean>	
		
	<bean id="wmsGetMap" class="org.geoserver.wms.GetMap">
	    <constructor-arg ref="wms"/>
        <property name="filterFactory" ref="filterFactory">
          <description>Use the same filter factory declared in the WFS module</description>
        </property>
    </bean>
  
    <!-- GetFeatureInfo output formats -->
    <bean id="wmsGetFeatureInfoPlainText" class="org.geoserver.wms.response.featureinfo.TextFeatureInfoOutputFormat">
      <constructor-arg ref="wms" />
    </bean>
  
    <bean id="wmsGetFeatureInfoGML2" class="org.geoserver.wms.response.featureinfo.GML2FeatureInfoOutputFormat">
      <constructor-arg ref="wms" />
    </bean>
    <bean id="wmsGetFeatureInfoHTML" class="org.geoserver.wms.response.featureinfo.HTMLFeatureInfoOutputFormat">
      <constructor-arg ref="wms" />
    </bean>
        
	<!-- wms service + descriptor -->
 	<bean id="wmsService2" class="org.geoserver.wms.DefaultWebMapService">
 	  <constructor-arg ref="wms"/>
 	</bean>
 	<alias name="wmsService2" alias="webMapService"/>
 	
 	<bean id="wmsServiceDescriptor" class="org.geoserver.platform.Service">
		<constructor-arg index="0" value="wms"/>
		<constructor-arg index="1" ref="wmsService2"/>
		<constructor-arg index="2" value="1.1.1"/>
	    <constructor-arg index="3">
          <list>
            <value>Capabilities</value>
            <value>GetCapabilities</value>
            <value>DescribeLayer</value>
            <value>GetFeatureInfo</value>
            <value>GetLegendGraphic</value>
            <value>GetMap</value>
            <value>Map</value>
            <value>reflect</value>
            <value>kml</value>
            <value>GetStyles</value>
          </list>
        </constructor-arg>
 	</bean>
 	<!-- service exception handler -->
	<bean id="wmsExceptionHandler" class="org.geoserver.wms.response.WmsExceptionHandler">
		<constructor-arg ref="wmsServiceDescriptor"/>
        <constructor-arg ref="geoServer"/>
		<property name="version" value="1.1.1"/>
		<property name="contentType" value="application/vnd.ogc.se_xml"/>
		<property name="DTDLocation" value="wms/1.1.1/WMS_exception_1_1_1.dtd"/>
	</bean>
 	
 	<!-- kvp parsers -->
  
    <!-- 
    Can't use MapLayerInfoKvpParser due to the issue with the workspace qualifier callbacks in Dispatcher:
    the kvp parsers are run at Dispatcher.init(), before dispatching the request, when the KvpReaders all called. At that
    time the KvpParsers already ran and may end up with valid layers that should not be if the WMSWorkSpaceQualifier catched them before.
    
    <bean id="wmsLayersKvpParser" class="org.geoserver.wms.kvp.MapLayerInfoKvpParser">
      <description>
        Parses a comma separated list of layer names into a
        java.util.List of MapLayerInfo objects
      </description>
      <constructor-arg value="LAYERS" />
      <constructor-arg ref="wms" />
      <property name="service" value="WMS"/>
    </bean>

    <bean id="wmsFeatureInfo_QueryLayersKvpParser" class="org.geoserver.wms.kvp.MapLayerInfoKvpParser">
      <description>
        Parses a comma separated list of layer names into a
        java.util.List of MapLayerInfo objects
      </description>
      <constructor-arg value="QUERY_LAYERS" />
      <constructor-arg ref="wms" />
      <property name="service" value="WMS"/>
      <property name="request" value="GetFeatureInfo"/>
    </bean>
    -->
    
 	<bean id="widthKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
		<constructor-arg value="width"/>
 	</bean>
 	<bean id="heightKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
		<constructor-arg value="height"/>
 	</bean>
 	<bean id="wmsFormatOptionsKvpParser" class="org.geoserver.ows.kvp.FormatOptionsKvpParser"/>
 	<bean id="wmsEnviromentKvpParser" class="org.geoserver.ows.kvp.FormatOptionsKvpParser">
 		<constructor-arg index="0" value="env"/>
 	</bean>
  <bean id="wmsSqlViewKvpParser" class="org.geoserver.ows.kvp.FormatOptionsKvpParser">
    <constructor-arg index="0" value="viewParams"/>
    <!-- cannot set the service or it won't work for the reflectors -->
  </bean>
 	<bean id="bgColorKvpParser" class="org.geoserver.wms.kvp.ColorKvpParser">
		<constructor-arg value="bgcolor"/>
 	</bean> 	
 	<bean id="transparentKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
 		<constructor-arg value="transparent"/>
 	</bean>
 	<bean id="tiledKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
 		<constructor-arg value="tiled"/>
 	</bean> 	
 	<bean id="tilesOriginKvpParser" class="org.geoserver.wms.kvp.TilesOriginKvpParser"/>
 	<bean id="bufferKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
 		<constructor-arg value="buffer"/>
 	</bean>
 	<bean id="paletteKvpParser" class="org.geoserver.wms.kvp.PaletteKvpParser"/>
    <bean id="timeKvpParser" class="org.geoserver.ows.kvp.TimeKvpParser">
        <constructor-arg value="time"/>
    </bean>
 	<bean id="elevationKvpParser" class="org.geoserver.ows.kvp.DoubleKvpParser">
		<constructor-arg value="elevation"/>
 	</bean>
 	<bean id="validateSldKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
 		<constructor-arg value="validateschema"/>
 	</bean>
    <bean id="sldKvpParser" class="org.geoserver.ows.kvp.URLKvpParser">
        <constructor-arg value="sld"/>
    </bean>
 	<bean id="startIndexKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
 	    <constructor-arg value="startIndex"/>
 	</bean>
 	<bean id="angleKvpParser" class="org.geoserver.ows.kvp.DoubleKvpParser">
		<constructor-arg value="angle"/>
 	</bean>
 	<bean id="stylesKvpParser" class="org.geoserver.ows.FlatKvpParser">
		<constructor-arg index="0" value="layers"/>
		<constructor-arg index="1" value="java.lang.String"/>
		<property name="request" value="GetStyles"/>
		<property name="service" value="WMS"/>
 	</bean>
    <bean id="dpiKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
        <constructor-arg value="dpi"/>
    </bean>
 	
 	
 	<!-- kvp request readers -->
 	<bean id="wmsGetCapabilitiesKvpReader" 
 		class="org.geoserver.wms.kvp.CapabilitiesKvpReader">
	</bean>

	<bean id="describeLayerKvpReader"
		class="org.geoserver.wms.kvp.DescribeLayerKvpRequestReader">
      	<constructor-arg ref="wms" />
	</bean>
	
	<bean id="getMapKvpReader"
		class="org.geoserver.wms.kvp.GetMapKvpRequestReader">
        <constructor-arg ref="wms"/>
	</bean>
	<bean id="getFeatureInfoKvpReader"
			class="org.geoserver.wms.kvp.GetFeatureInfoKvpReader">
      	<constructor-arg ref="wms" />
	</bean>
	<bean id="getLegendGraphicKvpReader"
			class="org.geoserver.wms.kvp.GetLegendGraphicKvpReader">
      	<constructor-arg ref="wms" />
	</bean>
  <!-- 
	<bean id="putStylesKvpReader"
		class="org.geoserver.wms.kvp.WMSKvpRequestReaderAdapter">
		<constructor-arg index="0" value="org.vfny.geoserver.sld.requests.PutStylesRequest" />
      	<constructor-arg index="1" value="org.vfny.geoserver.sld.requests.PutStylesKvpReader" />
      	<constructor-arg index="2" ref="wms" />
	</bean>
   -->
	
	<bean id="getStylesKvpReader" class="org.geoserver.sld.GetStylesKvpRequestReader">
		<constructor-arg ref="wms"/> 
	</bean>
		
	<!-- xml request readers -->
    <bean id="wmsCapabilitiesXmlReader" 
    	class="org.geoserver.wms.xml.CapabilitiesXmlReader">
    </bean>
    
     <bean id="getMapXmlReader" 
    	class="org.geoserver.wms.xml.GetMapXmlReader">
    	<constructor-arg ref="wms"/>
    </bean>
   	<bean id="sldXmlReader"
   		class="org.geoserver.sld.SLDXmlRequestReader">
      <constructor-arg ref="wms"/>
    </bean>
   		
	<!--  responses -->
	<bean id="wmsGetCapabilitiesResponse"
		class="org.geoserver.wms.response.GetCapabilitiesResponse">
	</bean>
	<bean id="describeLayerResponse"
		class="org.geoserver.wms.response.DescribeLayerResponse">
	</bean>
	<!--bean id="getMapResponse"
		class="org.geoserver.wms.response.GetMapResponse">
		<constructor-arg ref="wms"/>
	</bean-->
	<bean id="getFeatureInfoResponse"
		class="org.geoserver.wms.response.GetFeatureInfoResponse">
		<constructor-arg ref="wms"/>
        <constructor-arg ref="wmsGetFeatureInfoPlainText"/> <!-- default output format -->
	</bean>
	<bean id="getLegendGraphicResponse"
		class="org.geoserver.wms.response.GetLegendGraphicResponse">
		<constructor-arg ref="wms"/>
	</bean>
	<bean id="stylesResponse" class="org.geoserver.wms.response.GetStylesResponse"/>
	
	<!-- Wrapping the PutStyles servlet in a controller while we wait to rewrite it for good -->
    <!-- GR: commenting out, putStyles is not being used nor maintained? -->
	<!-- bean id="putStylesWrapper" class="org.springframework.web.servlet.mvc.ServletWrappingController">
	   <property name="servletClass">
	     <value>org.vfny.geoserver.sld.servlets.PutStyles</value>
	   </property>
	   <property name="servletName">
	     <value>putstyles</value>
       </property>
	</bean-->
	
	<!-- http url mapping -->
	<bean id="wmsURLMapping" 
		class="org.geoserver.ows.OWSHandlerMapping">
		<constructor-arg ref="catalog"/>
		<property name="alwaysUseFullPath" value="true"/>
		<property name="mappings">
			<props>
				<prop key="/wms">dispatcher</prop>
				<!-- prop key="/wms/putstyles">putStylesWrapper</prop-->
				<prop key="/wms/*">dispatcher</prop>
			</props>
		</property>
	</bean>
	<!--  
		GetLegendGraphic output formats
	 -->
	<bean id="wmsGIFLegendOutputFormat" 
		class="org.geoserver.wms.legendgraphic.GifLegendOutputFormat">
	</bean>
	<bean id="wmsJPEGLegendGraphicOutputFormat" class="org.geoserver.wms.legendgraphic.JAILegendOutputFormat">
      <constructor-arg value="image/jpeg"></constructor-arg>
	</bean>
	<bean id="wmsPNGLegendOutputFormat" 
		class="org.geoserver.wms.legendgraphic.PNGLegendOutputFormat">
	</bean>
	
	<!--  
		Map producers and responses
	 -->
    <bean id="wmsRawMapResponse"
      singleton="true"
      class="org.geoserver.wms.map.RawMapResponse">
    </bean>
    
    <bean id="wmsXMLTransformerResponse"
      singleton="true"
      class="org.geoserver.wms.map.XMLTransformerMapResponse">
      <description>Handles responsed from GetMapOutputFormats that produce 
                   an org.geoserver.wms.map.XMLTransformerMap, such as the KML and GeoRSS ones
      </description>
    </bean>
  
	<bean id="PNGMapProducer"
		singleton="false"
		class="org.geoserver.wms.map.PNGMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="GeoTiffMapProducer" 
		singleton="false"
		class="org.geoserver.wms.map.GeoTIFFMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
	</bean>

   	<bean id="TiffMapProducer" 
		singleton="false"
		class="org.geoserver.wms.map.TIFFMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
 	</bean>

	<bean id="GIFMapProducer" 
		singleton="false"
		class="org.geoserver.wms.map.GIFMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="JPEGMapProducer"
		singleton="false"
		class="org.geoserver.wms.map.JPEGMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="PDFMapProducer"
		singleton="false"
		class="org.geoserver.wms.map.PDFMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="KMLMapProducer" 
		singleton="false"
		class="org.geoserver.kml.KMLMapOutputFormat">
      <constructor-arg index="0" ref="wms"/>
	</bean>
	
	<bean id="KMZMapProducer"
		singleton="false"
		class="org.geoserver.kml.KMZMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="OpenLayersMapProducer"
		singleton="false"
		class="org.geoserver.wms.map.OpenLayersMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="AtomGeoRSSMapProducer"
		singleton="false"
		class="org.geoserver.wms.georss.AtomGeoRSSMapOutputFormat">
        <constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="RSSGeoRSSMapProducer"
		singleton="false"
		class="org.geoserver.wms.georss.RSSGeoRSSMapOutputFormat">
        <constructor-arg index="0" ref="wms"/>
	</bean>

	<bean id="SVGBatikMapOutputFormat" 
		singleton="true"
		class="org.geoserver.wms.svg.SVGBatikMapOutputFormat">
		<constructor-arg index="0" ref="wms"/>
	</bean>
  
    <bean id="SVGStreamingMapOutputFormat" 
        singleton="true"
        class="org.geoserver.wms.svg.SVGStreamingMapOutputFormat">
        <constructor-arg index="0" ref="wms"/>
    </bean>

 	
	<!-- http url mapping -->
	<bean id="kmlURLMapping" 
		class="org.geoserver.ows.OWSHandlerMapping">
		<constructor-arg ref="catalog"/>
		<property name="alwaysUseFullPath" value="true"/>
		<property name="mappings">
			<props>
				<prop key="/kml">dispatcher</prop>
				<prop key="/kml/*">dispatcher</prop>
			</props>
		</property>
	</bean>
	
	<!-- kml kvp parsers -->
 	<bean id="superOverlayKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="superoverlay"/>
 	</bean>
 	<bean id="legendKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="legend"/>
 	</bean>
 	<bean id="kmatrrKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="kmattr"/>
 	</bean>
 	<bean id="kmscoreKvpParser" class="org.geoserver.ows.kvp.IntegerKvpParser">
		<constructor-arg value="kmscore"/>
 	</bean>
 	<bean id="kmplacemarkKvpParser" class="org.geoserver.ows.kvp.BooleanKvpParser">
		<constructor-arg value="kmplacemark"/>
 	</bean>
  
    <!-- the meta tile cache, registered here because it's also a WFS transaction listener -->
    <bean id="metaTileCache" class="org.geoserver.wms.map.QuickTileCache">
      <constructor-arg ref="geoServer"/>
    </bean>

    <bean id="nativeSortingRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="native-sorting"/>
      <constructor-arg value="org.geoserver.kml.NativeSortRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>
    <bean id="externalSortingRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="external-sorting"/>
      <constructor-arg value="org.geoserver.kml.ExternalSortRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>
    <bean id="geometryRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="geometry"/>
      <constructor-arg value="org.geoserver.kml.GeometryRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>
    <bean id="randomRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="random"/>
      <constructor-arg value="org.geoserver.kml.RandomRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>
    <bean id="bestGuessRegionator"
        class="org.geoserver.kml.ReflectiveRegionatingStrategyFactory">
      <constructor-arg value="best_guess"/>
      <constructor-arg value="org.geoserver.kml.BestGuessRegionatingStrategy"/>
      <constructor-arg ref="geoServer"/>
    </bean>

    <!-- Default Decoration Plugins -->
    <bean id="image" 
          class="org.geoserver.wms.response.decoration.WatermarkDecoration"
          singleton="false"
     />

    <bean id="legend" 
          class="org.geoserver.wms.response.decoration.LegendDecoration"
          singleton="false">
       <constructor-arg ref="wms"/>
    </bean>

    <bean id="scaleratio" 
          class="org.geoserver.wms.response.decoration.ScaleRatioDecoration"
          singleton="false"
    />
    
    <bean id="scaleline" 
          class="org.geoserver.wms.response.decoration.ScaleLineDecoration"
          singleton="false"
    />
    
    <bean id="wmsWorkspaceQualifier" class="org.geoserver.wms.WMSWorkspaceQualifier">
      <constructor-arg ref="catalog"/>
    </bean>
    
    <bean id="wmsLocalWorkspaceURLManger" class="org.geoserver.ows.LocalWorkspaceURLMangler">
      <constructor-arg value="wms"/>
    </bean>
    
    <bean id="wmsLifecycleHandler" class="org.geoserver.wms.WMSLifecycleHandler">
      <constructor-arg index="0" ref="dataDirectory"/>
    </bean>
</beans>
